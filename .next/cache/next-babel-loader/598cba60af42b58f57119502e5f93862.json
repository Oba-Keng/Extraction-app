{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nconst dataDirectory = path.join(process.cwd(), \"data\");\nexport function getData() {\n  const fileNames = fs.readdirSync(dataDirectory);\n  const allData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, \"\"); // Read mark-down file as string\n\n    const fullPath = path.join(dataDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, \"utf8\"); // Use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  });\n  return allData;\n}","map":{"version":3,"sources":["/home/obakeng/Desktop/extraction-app/lib/data.js"],"names":["fs","path","matter","dataDirectory","join","process","cwd","getData","fileNames","readdirSync","allData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,aAAa,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,MAAzB,CAAtB;AAEA,OAAO,SAASC,OAAT,GAAmB;AACxB,QAAMC,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeN,aAAf,CAAlB;AAEA,QAAMO,OAAO,GAAGF,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AACxC;AACA,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAFwC,CAIxC;;AACA,UAAMC,QAAQ,GAAGd,IAAI,CAACG,IAAL,CAAUD,aAAV,EAAyBS,QAAzB,CAAjB;AACA,UAAMI,YAAY,GAAGhB,EAAE,CAACiB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CANwC,CAQxC;;AACA,UAAMG,YAAY,GAAGhB,MAAM,CAACc,YAAD,CAA3B,CATwC,CAWxC;;AACA;AACEH,MAAAA;AADF,OAEKK,YAAY,CAACC,IAFlB;AAID,GAhBe,CAAhB;AAkBA,SAAOT,OAAP;AACD","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\n\nconst dataDirectory = path.join(process.cwd(), \"data\");\n\nexport function getData() {\n  const fileNames = fs.readdirSync(dataDirectory);\n\n  const allData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, \"\");\n\n    // Read mark-down file as string\n    const fullPath = path.join(dataDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, \"utf8\");\n\n    // Use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents);\n\n    // Combine the data with the id\n    return {\n      id,\n      ...matterResult.data\n    };\n  });\n\n  return allData;\n}\n"]},"metadata":{},"sourceType":"module"}